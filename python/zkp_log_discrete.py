import random
import hashlib
from .elliptic_curve import get_curve
from .interface_zkp import ZeroKnowledgeProtocol, ZeroKnowledgeProtocolNonInteractive   

class DiscreteLogInteractive(ZeroKnowledgeProtocol):

    def __init__(self, g, y, p, x = None):
        """
        :param g: generator
        :param y: public key
        :param p: modulo
        :param x: secret
        """
        self._g = g
        self._y = y
        self._p = p 
        self._x = x
    
    def commitment(self):
        """
        :return: commitment (g^r mod p)
        """
        self._r = random.randint(0, self._p - 1)
        commitment = pow(self._g, self._r, self._p)
        return commitment
    
    def challenge(self):
        """        
        :return: challenge (x * c + r mod p - 1)
        """
        self._challenge = random.randint(1, self._p - 1)
        return self._challenge
    
    def response(self, challenge):
        """
        :param challenge: The challenge generated by the verifier

        :return: response (x * c + r mod p - 1)
        """
        return ( self._x * challenge + self._r ) % (self._p - 1)

    def verify(self, response, commitment):
        """
        :param response: The response generated by the prover
        :param commitment: The commitment generated by the prover
        """
        assert pow( self._g, response, self._p ) == ( pow(self._y, self._challenge) * commitment ) % self._p

class DiscreteLogNonInteractive(ZeroKnowledgeProtocol):
    """
    Implementation based on https://asecuritysite.com/zero/nizkp2
    """
    def __init__(self, g, y, p, x = None):
        """
        :param g: generator
        :param y: public key
        :param p: modulo
        :param x: secret
        """
        self._g = g
        self._p = p
        self._y = y 
        self._x = x

    def challenge(self):
        """
        Generates a challenge for the user.
        Parameters:
            None
        Returns:
            A tuple containing the challenge value and the computed V value.
        """
        chal = str(self._g) + str(self._x) + str(self._y)
        h = hashlib.md5()
        h.update(chal.encode())
        self._v = random.randint(0, self._p - 1)
        V = pow(self._g, self._v, self._p)
        self._c = int(h.hexdigest(), 16)
        return self._c, V

    def response(self):
        """
        Calculate the response value based on the current state of the object.
        Returns:
            int: The calculated response value.
        """
        return (self._v - self._c * self._x) % (self._p - 1)

    def verify(self, r, c, V):
        """
        Verify the validity of a given signature.
        Parameters:
            r (int): The r value of the signature.
            c (int): The c value of the signature.
            V (int): The V value of the signature.
        Returns:
            None
        Raises:
            AssertionError: If the signature is invalid.
        """
        check = (pow(self._g, r, self._p) * pow(self._y, c, self._p)) % self._p
        assert V == check

class DiscreteLogNonInteractiveEcc(ZeroKnowledgeProtocolNonInteractive):

    curve = get_curve('secp256r1')
    
    def __init__(self, x = None):
        """
        Initializes the object with an optional value for x.
        Parameters:
            x (optional): An optional value for x.
        Returns:
            None
        """
        if x:
            self._x = x
            DiscreteLogNonInteractiveEcc.y = DiscreteLogNonInteractiveEcc.curve.scalar_mult(x, DiscreteLogNonInteractiveEcc.curve.g)

    def response(self):
        """
        Generate a response using the DiscreteLogNonInteractiveEcc algorithm.
        
        Returns:
            tuple: A tuple containing the calculated values t and s.
                - t (Point): The calculated point t.
                - s (int): The calculated value s.
        """
        r  = DiscreteLogNonInteractiveEcc.curve.get_random()
        t =  DiscreteLogNonInteractiveEcc.curve.scalar_mult(r, DiscreteLogNonInteractiveEcc.curve.g)
        c = DiscreteLogNonInteractiveEcc.curve.hash_points( [ DiscreteLogNonInteractiveEcc.curve.g, DiscreteLogNonInteractiveEcc.y, t ] )
        s = ((r + c * self._x) % DiscreteLogNonInteractiveEcc.curve.order )
        return t, s

    def verify(self, t, s):
        """
        Verify the equality of two values by performing a discrete logarithm non-interactive elliptic curve cryptography (ECC) verification.
        
        Args:
            t: The first value to be verified.
            s: The second value to be verified.
        
        Returns:
            None
            
        Raises:
            AssertionError: If the verification fails (i.e., the values are not equal).
        """
        c = DiscreteLogNonInteractiveEcc.curve.hash_points( [ DiscreteLogNonInteractiveEcc.curve.g, DiscreteLogNonInteractiveEcc.y, t ] )
        lhs = DiscreteLogNonInteractiveEcc.curve.scalar_mult(s, DiscreteLogNonInteractiveEcc.curve.g)
        yc = DiscreteLogNonInteractiveEcc.curve.scalar_mult(c, DiscreteLogNonInteractiveEcc.y)
        rhs = DiscreteLogNonInteractiveEcc.curve.point_add(t, yc)
        assert lhs == rhs